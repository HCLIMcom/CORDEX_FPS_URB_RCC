#
# HARMONIE system configuration for ECMWF BOND Atos
# All paths related to ecFlow must be on $HOME or $PERM, so they can be reached from the virtual server
#

# Identify and describe your system
export COMPCENTRE=ECMWF
export ECACCOUNT=spselind

# Experiment identifier and directories
# EXP is defined when an experiment is started by "Harmonie start ..."
EXP=${EXP?"Give 'experiment' identifier EXP before running this script"}
# Allow a user to override SCRATCH,PERM 
export FCSCRATCH=${FCSCRATCH-$SCRATCH}
export FCPERM=${FCPERM-$PERM}
export HM_DATA=$FCSCRATCH/hm_home/$EXP              # HM_DATA on main HARMONIE host
export HM_LIB=$FCPERM/hm_lib/${EXP}$STREAM          # directory for scripts and code
export MAKEUP_BUILD_DIR=$HM_DATA/lib              # Makeup directory for compiled objects, executables
export CMAKE_BUILD_DIR=$HM_DATA/cmake-build       # CMake build directory
export BUILD_WITH=cmake                           # On this system, use cmake for the build

export PARCH=$HPCPERM/hm_home/${EXP}/parchive

# mass storage system. Access by script Access_lpfs
export HM_ARC=`perl -e '$_="'$HOME'"; s~^/.*/~/~; print $_, "/harmonie"'`
export HM_EXP=$HM_ARC/$EXP                        # experiment archive directory in LPFS

# Define hosts and the location of this file on each host
export HOST0=hpc-batch
export HOST_INSTALL=0
export SUBMITHOST=hpc-batch                       # ECMWF specific, from ecflow server, ssh to this host to run Submit.pl
export MAILHOST=hpc-batch                         # Send mails by ssh'ing to this host

# ecFlow 
export JOBOUTDIR=$HOME/HARMONIE                   # Common to all experiments, ECF_HOME
export ECFLOWUI=ecflow_ui
export ECF_HOST_LIST="ecflow-gen-$USER-001 ecfg-$USER-1"
export ECF_PORT=3141
export ECF_FILES=$HM_LIB/ecf
export ECF_INCLUDE=$HM_LIB/ecf
if [ "no$ECF_HOST" = "no" ]; then
  printf "$(date +'%y-%m-%d %T Harmonie:') Selecting ECF_HOST ... "
  nfound=0
  for ecf_host in $ECF_HOST_LIST; do
    if ping -c1 -W1 $ecf_host &> /dev/null; then
      printf "found $ecf_host ... "
      export ECF_HOST=$ecf_host
      ((nfound+=1))
    fi
  done
  if [ $nfound -ne 1 ]; then
    echo "expected 1 ecFlow host, but found $nfound, EXIT"
    exit 1
  fi
  echo "OK"
fi

# Remove possible user settings
unset LD_LIBRARY_PATH

# To build or not to build
CODECOMPILE="yes"
if [ ${CODECOMPILE} == "no" ] ; then
  export BUILD="no"
  # Set RELEASE to Harmonie tag; develop binaries in 
  export BINDIR=/perm/hlam/apps/harmonie/GNU/73/bin
  echo
  echo " ... Using pre-compiled binaries"
  echo " ... ${BINDIR}"
  echo
fi

export HM_CS=${HM_CS-intel}
module purge
# Load modules needed
if [ "$HM_CS" == "gnu" ]; then
  module load prgenv/gnu
  module load hpcx-openmpi/2.9.0
  module load openblas/0.3.9
  module load netcdf4/4.9.3
  module load hdf5/1.14.6
  module load ecmwf-toolbox/2021.08.3.0
  module load python3/3.8.8-01
  module load gdal/3.2.1
  module load udunits/2.2.28
  module load proj/9.5.1
  module load fftw/3.3.9
  module load nco
  export CMAKE_CONFIG=config.aa.GNU.json
elif [ "$HM_CS" == "intel" ]; then
  module load prgenv/intel
  module load intel-mkl/19.0.5
  module load hpcx-openmpi/2.9.0
  module load netcdf4/4.9.3
  module load hdf5/1.14.6
  module load ecmwf-toolbox/2021.08.3.0
  module load python3/3.8.8-01
  module load gdal/3.2.1
  module load udunits/2.2.28
  module load proj/9.5.1
  module load fftw/3.3.9
  module load nco
  export CMAKE_CONFIG=config.aa.Intel.json
else
  echo "HM_CS=$HM_CS not supported"
fi
module load cmake/3.20.2
if [[ "${TASK-undef}" =~ ^(Archive_odb|verodb2sqlite)$ ]]; then
  module purge
  module load prgenv/gnu
  module use /perm/hlam/apps/modulefiles/lmod
  module load odb_api/0.18.1
  module load python3/3.8.8-01
  module load odbcon/0.3.1
fi
module load ecflow/5.14.0
module list

# Configuration identifier for makeup and util config files
HARMONIE_CONFIG=ECMWF.atos
export HARMONIE_CONFIG=${HARMONIE_CONFIG}.${HM_CS}

# Location of libraries and main binaries
export INSTALL_DIR=$HM_DATA/install

# BUFR
export BUFR_TABLES=$HM_LIB/util/auxlibs/bufr_405/bufrtables/                      # Directory with BUFR tables
# GRIBEX
export LOCAL_DEFINITION_TEMPLATES=$HM_LIB/util/auxlibs/gribex_370/gribtemplates/  # Grib tables
export ECMWF_LOCAL_TABLE_PATH=$HM_LIB/util/auxlibs/gribex_370/gribtables/         # Grib definitions
# ECCODES
export ECCODES=$ECCODES_DIR
export ECCODES_DEFINITION_PATH=$HM_LIB/const/eccodes/definitions:$HM_LIB/util/gl/definitions:$ECCODES/share/eccodes/definitions
export ECCODES_INCLUDE=$ECCODES_INCLUDE
export ECCODES_LIB="-L${ECCODES}/lib -leccodes_f90 -leccodes"
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${ECCODES}/lib
# ODB
export ODB_SCRPATH=$HM_LIB/src/odb/scripts

# Run time libraries
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$NETCDF_DIR/lib:$HDF5_DIR/lib:$PROJ_DIR/lib

# Add HARMONIE directories to the path
export PATH=.:$HM_LIB/scr:$HM_LIB/suites:$HM_LIB:$ODB_SCRPATH:$PATH

# Climate, satellite and wind farm data location
export RTTOV_COEFDIR=/ec/res4/hpcperm/hlam/data/satellite/rtcoef_rttov12/harm_coef
export HM_SAT_CONST=/ec/res4/hpcperm/hlam/data/satellite/sat_const

# Use pre-generated climate files
export USE_REF_CLIMDIR=no

export HM_CLDATA=/ec/res4/hpcperm/hlam/data/climate
export E923_DATA_PATH=$HM_CLDATA/E923_DATA
export PGD_DATA_PATH=$HM_CLDATA/PGD
export ECOSG_DATA_PATH=$HM_CLDATA/ECOCLIMAP-SG

export GMTED2010_DATA_PATH=$HM_CLDATA/GMTED2010
export SOILGRID_DATA_PATH=$HM_CLDATA/SOILGRID
export RAD_DATA_PATH=/ec/res4/hpcperm/hlam/data/ecrad                             # GHG climatology & time series, solar irradiance (https://confluence.ecmwf.int/display/ECRAD/ECMWF+Radiation+Scheme+Home)
unset ECOCLIMAP_DATA_PATH

export WINDFARM_DATA_PATH=/ec/res4/hpcperm/hlam/data/windfarm

# Platform dependent namelist settings
export NPROMA=-32

# Disk cleaning levels. See SaniDisk.pl for the options and settings
export CLEANING_LEVEL=default

# Utilities
#
# git exclude, set this empty if you also would like to syncronize the git directories
export RSYNC_EXCLUDE='--exclude=.git --exclude=.gitignore'
export GIT=git

# For the main linux platform
export RSYNC="rsync -rltoDvh"
export RSH=ssh
export RCP=scp
export MAKE=make
export MKDIR="mkdir -p"
export CPP="cpp -w" # Fewer warnings from Makeup_configure

# MAX PIDS for LISTENERS, etc.
export LISTENER_MAXPIDS=${LISTENER_MAXPIDS:-2}

# DrHook stuff
export DR_HOOK=${DR_HOOK-1}
if [ $DR_HOOK -eq 1 ]; then
  export DR_HOOK_SHOW_PROCESS_OPTIONS=0
##  export DR_HOOK_OPT=prof
##  export DR_HOOK_PROFILE=drhook.prof.%d
else
  export DR_HOOK_INIT_SIGNALS=0
fi

# Reduce amount of useless zeros at end
export EC_PROFILE_HEAP=0

# SQLITE3
BUILD_SQLITE3=yes
unset BINSQLITE3 SQLITE3_LIB SQLITE3_INC

# Clean environment
#unset RADARDIR MAKEGRIB_VERSION ECOCLIMAP_DATA_PATH
export AGELIMIT=10

export LD_LIBRARY_PATH=$UDUNITS_DIR/lib:$LD_LIBRARY_PATH
