## -*- cperl -*-
sub get_job {

use POSIX;
use List::Util qw(min);

@tmp = split('/',shift) or die "No argument given to get_job \n" ;
$job = pop @tmp ;

$ntasks_mars = shift ;

#############################
# Start of user definitions #
#############################

# Define submission type

$submit_type ='#SBATCH' ;
$submit      = "ecsbatch $jobfile-q";
$RUNHOST     = $ENV{ "HOST$host" };

#
# SETTINGS
#
# Max memory in nf queue
$max_mem_nf = 128000 ;

# OpenMP threads
$ompthreads=1;
$ompth_fc = 1;
$ompth_1nod = 1;
# use hyper-threading if omp_threads > 1
$tpn_fc = ( $ompth_fc == 1 ? 128 : int(256/$ompth_fc) );

# Number of processors and pools
if ( $job eq 'Forecast' or $job eq 'Dfi' or $job eq 'Listen2file' ) {
 $nprocx=23;
 $nprocy=44;
} else {
 $nprocx=8;
 $nprocy=8;
}

$nproc = $nprocx * $nprocy ;

if ( $ENV{IO_SERVER} eq 'yes' ) {
  $nproc_io=$tpn_fc*int($nproc/$tpn_fc + 1) - $nproc;   #fill last node
} else {
  $nproc_io=0;
}
$tpn_fc = min( $tpn_fc, $nprocx*$nprocy + $nproc_io );  # limit tasks per node for testbed
$nnode_fc = ceil( ($nprocx*$nprocy + $nproc_io) / $tpn_fc);

# For UA DA
$npools = $nproc;

# Canari pools, could be different
$npools_canari= $nproc;

# Construct job name, with experiment & member
if ( $ENSMBR >= 0 ) {
   $jobname   = sprintf "%s:m%03d:%s", $ENV{"EXP"}, $ENSMBR, $job;
} else {
   $jobname   = sprintf "%s:%s", $ENV{"EXP"}, $job;
}

# Define background job
%backg_job= (
  'ZEMPTY'     => '',
  'SUBMIT'     => "$jobfile-q > $jobout 2>&1 &",
  'KILL'       => "$RSH -o StrictHostKeyChecking=no $ENV{HOST0} 'kill $ECF_RID'",
  'RUNHOST'    => $ENV{HOST0},
  'HOST'       => '0',
  'ZOMP_NUM_THREADS' => 'export OMP_NUM_THREADS=1',
);

# Create default job with keywords
%scalar_job = (
   'SUBMIT'           => $submit,
   'RUNHOST'          => $ENV{HOST0},
   'HOST'             => '0',
   'QUEUE'            => $submit_type.' --qos=nf',
   'WALLTIME'         => $submit_type.' --time=02:00:00',
   'OUTFILE'          => $submit_type.' --output='.$jobout,
   'ERRFILE'          => $submit_type.' --error='.$jobout,
   'NAME'             => $submit_type.' --job-name='.$jobname,
   'ACCOUNT'          => $submit_type." --account=$ENV{ECACCOUNT}",
   'KILL'             => "$RSH -o StrictHostKeyChecking=no $ENV{HOST0} 'scancel \$SLURM_JOB_ID'",
   'ZNPROC'           => 'export NPROC=1' ,
   'ZNPROCX'          => 'export NPROCX=1' ,
   'ZNPROCY'          => 'export NPROCY=1' ,
   'ZNPOOLS'          => 'export NPOOLS='.$npools ,
   'ZMPPEXEC'         => 'export MPPEXEC="srun"' ,
   'ZMPPGL'           => 'export MPPGL=""' ,
   'ZOMP_NUM_THREADS' => 'export OMP_NUM_THREADS=1',
   'ZXPMEM_NOWARN'    => 'export OMPI_MCA_btl="^vader"',
   'ZAAEMPTY'         => '',
);

if ($ENV{HM_CS} eq 'intel' and exists $ENV{I_MPI_ROOT}) {
  $scalar_job{'ZMPPGL'} = 'export MPPGL="srun"';  # only with intelmpi
}

#
# Define the default nf job
#
%frac_job = %scalar_job ;
$frac_job{'QUEUE'}           = $submit_type.' --qos=nf';
$frac_job{'NTASKS'}          = $submit_type.' --ntasks='.$ompth_1nod;
$frac_job{'MEM_PER_CPU'}     = $submit_type.' --mem-per-cpu=2000';
$frac_job{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task=4';
$frac_job{'WALLTIME'}        = $submit_type.' --time=02:00:00';
$frac_job{'ZNPROC'}          = 'export NPROC='.$nproc ;
$frac_job{'ZNPROCX'}         = 'export NPROCX='.$nprocx ;
$frac_job{'ZNPROCY'}         = 'export NPROCY='.$nprocy ;
#
# Define the default npjob
#
%par_job = %scalar_job ;

$par_job{'QUEUE'}           = $submit_type.' --qos=np';
$par_job{'NTASKS'}          = $submit_type.' --ntasks='.$nproc;
$par_job{'WALLTIME'}        = $submit_type.' --time=02:00:00';
$par_job{'ZNPROC'}          = 'export NPROC='.$nproc ;
$par_job{'ZNPROCX'}         = 'export NPROCX='.$nprocx ;
$par_job{'ZNPROCY'}         = 'export NPROCY='.$nprocy ;

#
# Build list of jobs
#
# The default list should contain the word 'default'
# Jobs deviating from default has to be defined as well
#

# Backgound jobs on ecFlow server
@backg_list = ('InitRun','LogProgress','Create_exp','Wrapup');


# Scalar jobs
@scalar_list = ('default',
                'Prepare_cycle','Boundary_strategy','ExtractBD',
                'FirstGuess','FirstGuess4Scrextr',
                'Fetch_assim_data','Archive_odb','Archive_host1','Archive_logs','CollectLogs','Tar_vfld',
                'Follow_exp',
                'Field_monitor','SaniDisk','Clean_FA',
                'Makeup_sync','Fldextr','Prep_ini_surfex',
                'Prefetch_boundaries','MARS_stage_bd',
                'Climate','Prepare_pgd','Prepare_soil','Addsurf','Addsurf4Scrextr','Aerosolupd',
                'e927_bd','Interpol_sst','Interpol_sst_mll',
                'Bator_conv_sfc','Bator_conv','Bator_modes',
                'Bator_seviri','Bator_amsua','Bator_amsub','Bator_amsub_allsky',
                'Bator_geow','Bator_polw','Bator_cris',
                'Bator_atms','Bator_mwhs','Bator_iasi',
                'Bator_scatt','Bator_radar','Bator_gpsro','Bator_lidar',
                'Makegrib_an','verodb2sqlite','convertFA',
                'obsmon_link_stat',
                'Prep_DFS','Extract_DFS',
                'OI_main','LBCn_all','Makeup_configure','Fldextr_all','PertAna','Pertdia',
                'Testbed_comp','MSG_combine','LBCmix','LSmixBC');

# Fractional jobs
@frac_list = ('gl_bd','Listen2file','Makeup', 'CMake_configure', 'CMake_OOPS', 'CMake_gl', 'CMake_obsmon', 'CMake_prerequisites',
              'Interpol_cams','Merge_aerosols','Merge_aerosols_fc',
              'LBCn_all','Fldextr_all','obsmon_stat_sfc','obsmon_stat_synop_sfc','obsmon_stat_synop',
              'obsmon_stat_aircraft','obsmon_stat_temp','obsmon_stat_pilot',
              'obsmon_stat_amv','obsmon_stat_radar','obsmon_stat_limb',
              'obsmon_stat_amsua','obsmon_stat_amsub', 'obsmon_stat_atms',
              'obsmon_stat_mwhs2','obsmon_stat_seviri', 'obsmon_stat_scatt') ;

# Parallell jobs
@par_list    = ('Dfi','Forecast','Minim','Screening','Scrextr','Canari','Postpp',
                '4DVprolog','4DVscreen','4DVminim','4DVtraj',
                'TL_test','AD_test','Minim_DFS',
                'CMake_build',
                'OFFLINE_SURFEX','Soda',
                'fph2l','fpl2h_fg','fpl2h_an',
                'Festat',
                'obsmon_stat_sfc','obsmon_stat_ecma','obsmon_stat_ccma','obsmon_stat_iasi');

# Create the full list of jobs
%job_list = () ;
&build_list(('backg','scalar','frac','par')) ;

#
# Make task specific changes
#
$job_list{'MSG_combine'}{'ZOMP_NUM_THREADS'}  = 'export OMP_NUM_THREADS=32';
$job_list{'MSG_combine'}{'MEM_PER_CPU'}      = $submit_type.' --mem-per-cpu=30000'; #

for my $task ( 'Forecast', 'Dfi' ) {
  $job_list{$task}{'NTASKS'}          = $submit_type.' --nodes='.$nnode_fc;
  $job_list{$task}{'TASKS_PER_NODE'}  = $submit_type.' --ntasks-per-node='.$tpn_fc;
  $job_list{$task}{'ZNPROC_IO'} = 'export NPROC_IO='.$nproc_io;
  $job_list{$task}{'ZOMP_NUM_THREADS'} = 'export OMP_NUM_THREADS='.$ompth_fc;
  $job_list{$task}{'CPUS_PER_TASK'} = $submit_type.' --cpus-per-task='.$ompth_fc;
  if ($ompth_fc > 1) {
    $job_list{$task}{'MTHINT'} = $submit_type.' --hint=multithread';
    $job_list{$task}{'ZOMP_STACKSIZE'} = 'export OMP_STACKSIZE=128M';
    $job_list{$task}{'ZOMP_PLACES'}    = 'export OMP_PLACES=threads';
  } else {
    $job_list{$task}{'MTHINT'} = $submit_type.' --hint=nomultithread';
  }
  ##$job_list{$task}{'ZSCB'} = 'export SLURM_CPU_BIND=verbose';
}

$job_list{'Prep_ini_surfex'}{'NTASKS'}   = $submit_type.' --ntasks=1';
$job_list{'Prep_ini_surfex'}{'ZNPROC'}   = 'export NPROC=1';
$job_list{'Prep_ini_surfex'}{'ZNPROCX'}  = 'export NPROCX=1';
$job_list{'Prep_ini_surfex'}{'ZNPROCY'}  = 'export NPROCY=1';
$job_list{'Prep_ini_surfex'}{'ZOMP_NUM_THREADS'} = 'export OMP_NUM_THREADS='.$ompth_1nod;
$job_list{'Prep_ini_surfex'}{'MEM_PER_CPU'}      = $submit_type.' --mem-per-cpu=20000';

for my $task ( 'OFFLINE_SURFEX' ) {
  $nprocRef="16"; 
  $job_list{$task}{'NODES'}     = $submit_type.'  --nodes=1';
  $job_list{$task}{'NTASKS'}    = $submit_type.'  --ntasks='.$nprocRef;
  $job_list{$task}{'NTPC'}      = $submit_type.' --ntasks-per-core=1';
  $job_list{$task}{'ZOMP_NUM_THREADS'} = 'export OMP_NUM_THREADS=1';
  $job_list{$task}{'ZMPPGL'}   = 'export MPPGL="srun -n '.$nprocRef.'"';
  $job_list{$task}{'ZMPPEXEC'}   = 'export MPPEXEC="srun -n '.$nprocRef.'"';
}

for my $task ( 'Soda' ) {
  $nprocRef="64"; 
  $job_list{$task}{'NODES'}     = $submit_type.'  --nodes=4';
  $job_list{$task}{'NTASKS'}    = $submit_type.'  --ntasks='.$nprocRef;
  $job_list{$task}{'NTPC'}      = $submit_type.' --ntasks-per-core=1';
  $job_list{$task}{'ZOMP_NUM_THREADS'} = 'export OMP_NUM_THREADS=1';
  $job_list{$task}{'ZMPPGL'}   = 'export MPPGL="srun -n '.$nprocRef.'"';
  $job_list{$task}{'ZMPPEXEC'}   = 'export MPPEXEC="srun -n '.$nprocRef.'"';
}

$job_list{'Climate'}{'NTASKS'}           = $submit_type.' --ntasks=1';
$job_list{'Climate'}{'ZNPROC'}           = 'export NPROC=1';
$job_list{'Climate'}{'ZNPROCX'}          = 'export NPROCX=1';
$job_list{'Climate'}{'ZNPROCY'}          = 'export NPROCY=1';
$job_list{'Climate'}{'ZOMP_NUM_THREADS'} = 'export OMP_NUM_THREADS='.$ompth_1nod;

$job_list{'Prepare_soil'}{'MEM_PER_CPU'} = $submit_type.' --mem-per-cpu=8000';
$job_list{'Prepare_pgd'}{'MEM_PER_CPU'}  = $submit_type.' --mem-per-cpu=12000';
$job_list{'gl_bd'}{'MEM_PER_CPU'}        = $submit_type.' --mem-per-cpu=4000';
$job_list{'e927_bd'}{'MEM_PER_CPU'}      = $submit_type.' --mem-per-cpu=8000';
$job_list{'Makegrib_an'}{'MEM_PER_CPU'}  = $submit_type.' --mem-per-cpu=8000';

# Makeup
$job_list{'Makeup'}{'NTASKS'}            = $submit_type.' --ntasks=16';
$job_list{'Makeup'}{'ZNPROC'}            = 'export NPROC=16';

# CMake
$job_list{'CMake_build'}{'NODES'}             = $submit_type.' --nodes=1';
$job_list{'CMake_build'}{'NTASKS'}            = $submit_type.' --ntasks=64';
$job_list{'CMake_build'}{'ZNPROC'}            = 'export NPROC=64';
$job_list{'CMake_build'}{'CPUS_PER_TASK'}     = $submit_type.' --cpus-per-task=1';

# Prefetch_boundaries
delete $job_list{Prefetch_boundaries}{'TASK_PER_NODE'}  ;
$job_list{Prefetch_boundaries}{'NTASKS'}        = $submit_type.' --ntasks='.$ntasks_mars ;
$job_list{'Prefetch_boundaries'}{'MEM_PER_CPU'} = $submit_type.' --mem-per-cpu=4000' ;

# MARS_stage_bd
delete $job_list{MARS_stage_bd}{'TASK_PER_NODE'} ;
$job_list{MARS_stage_bd}{'NTASKS'}   = $submit_type.' --ntasks='.$ntasks_mars ;

# Change timing
$job_list{'Prefetch_boundaries'}{'WALLTIME'}= $submit_type.' --time=09:00:00';
$job_list{'MARS_stage_bd'}{'WALLTIME'}      = $submit_type.' --time=12:00:00';
$job_list{'gl_bd'}{'WALLTIME'}              = $submit_type.' --time=00:10:00';
$job_list{'e927_bd'}{'WALLTIME'}            = $submit_type.' --time=00:10:00';
$job_list{'Listen2file'}{'WALLTIME'}        = $submit_type.' --time=01:30:00';
$job_list{'Forecast'}{'WALLTIME'}           = $submit_type.' --time=01:30:00';
$job_list{'Climate'}{'WALLTIME'}            = $submit_type.' --time=02:00:00';
$job_list{'Makeup'}{'WALLTIME'}             = $submit_type.' --time=06:00:00';
$job_list{'Makeup_configure'}{'WALLTIME'}   = $submit_type.' --time=01:30:00';
$job_list{'Prepare_pgd'}{'WALLTIME'}        = $submit_type.' --time=04:00:00';
$job_list{'Prep_ini_surfex'}{'WALLTIME'}    = $submit_type.' --time=02:00:00';
$job_list{'Archive_mars'}{'WALLTIME'}       = $submit_type.' --time=01:00:00';
$job_list{'Canari'}{'WALLTIME'}             = $submit_type.' --time=02:00:00';
$job_list{'convertFA'}{'WALLTIME'}          = $submit_type.' --time=06:00:00';

# More time and patience for climate simulations
if ( $ENV{SIMULATION_TYPE} eq 'climate' ) {
  $job_list{'Prefetch_boundaries'}{'WALLTIME'}= $submit_type.' --time=48:00:00';
  $job_list{'MARS_stage_bd'}{'WALLTIME'}      = $submit_type.' --time=48:00:00';
  $job_list{'Forecast'}{'WALLTIME'}           = $submit_type.' --time=18:00:00';
  $job_list{'Listen2file'}{'WALLTIME'}        = $submit_type.' --time=18:00:00';

  $job_list{'Forecast'}{'ZPATIENCE'}          = 'export PATIENCE=86400';
  $job_list{'Listen2file'}{'ZPATIENCE'}       = 'export PATIENCE=86400';
}

# Environment variables settings
my $lmaxpid = min(8,$nproc_io);
$job_list{'Listen2file'}{'MTHINT'}            = $submit_type.' --hint=nomultithread';
$job_list{'Listen2file'}{'ZLISTENER_MAXPIDS'} = 'export LISTENER_MAXPIDS='.$lmaxpid;
$job_list{'Listen2file'}{'ZMPPEXEC'}          = 'export MPPEXEC=""';
$job_list{'Listen2file'}{'ZOMP_NUM_THREADS'}  = 'export OMP_NUM_THREADS=1';
$job_list{'Listen2file'}{'ZNPROC_IO'}         = 'export NPROC_IO='.$nproc_io;
my $memcpu = 16000;
if ($nproc_io > 0) {
  $job_list{'Listen2file'}{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task='.$lmaxpid;
  $memcpu = min( int($max_mem_nf/$lmaxpid), $memcpu );
}
$job_list{'Listen2file'}{'MEM_PER_CPU'} = $submit_type.' --mem-per-cpu='.$memcpu;

# Set NPOOLS correctly
$job_list{'FirstGuess'}{'ZNPOOLS'}         = 'export NPOOLS='.$npools ;
for $task ( 'Bator_conv_sfc','Bator_conv','Bator_modes',
            'Bator_seviri','Bator_amsua','Bator_amsub','Bator_amsub_allsky',
            'Bator_geow','Bator_polw','Bator_cris',
            'Bator_atms','Bator_mwhs','Bator_iasi',
            'Bator_scatt','Bator_radar','Bator_gpsro','Bator_lidar' ){
    $job_list{$task}{'ZNPOOLS'}          = 'export NPOOLS='.$npools ;
    $job_list{$task}{'ZNPOOLS_CANARI'}   = 'export NPOOLS_CANARI='.$npools_canari ;
}
$job_list{'Bator_iasi'}{'MEM_PER_CPU'}   = $submit_type.' --mem-per-cpu=32000';

# Canari runs with less pools/cores
$job_list{'Canari'}{'ZNPROC'}          = 'export NPROC='.$npools_canari;
$job_list{'Canari'}{'ZNPROCX'}         = 'export NPROCX=1';
$job_list{'Canari'}{'ZNPROCY'}         = 'export NPROCY='.$npools_canari ;
$job_list{'Canari'}{'ZNPOOLS'}         = 'export NPOOLS='.$npools_canari ;

# Variational jobs are 1D
for $task ( 'Screening','Scrextr','Minim','4DVscreen','4DVminim','4DVtraj','Minim_DFS') {
  $job_list{$task}{'ZNPOOLS'}      = 'export NPOOLS='.$npools ;
  $job_list{$task}{'ZNPROC'}       = 'export NPROC='.$npools;
  $job_list{$task}{'ZNPROCX'}      = 'export NPROCX=1';
  $job_list{$task}{'ZNPROCY'}      = 'export NPROCY='.$npools ;
}

$job_list{'4DVtraj'}{'ZMPPEXEC_CONV'}      = 'export MPPEXEC_CONV=""' ;

for $task ( '4DVprolog' ) {
  $job_list{$task}{'NTASKS'}          = $submit_type.' --nodes=1';
  $job_list{$task}{'TASKS_PER_NODE'}  = $submit_type.' --ntasks-per-node=4';
  $job_list{$task}{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task=32';
  $job_list{$task}{'WALLTIME'}        = $submit_type.' --time=00:30:00';
  $job_list{$task}{'ZNPROC'}          = 'export NPROC=4';
  $job_list{$task}{'ZNPROCX'}         = 'export NPROCX=2';
  $job_list{$task}{'ZNPROCY'}         = 'export NPROCY=2';
  $job_list{$task}{'ZOMP_NUM_THREADS'} = 'export OMP_NUM_THREADS=32';
  $job_list{$task}{'MTHINT'} = $submit_type.' --hint=nomultithread';
  $job_list{$task}{'ZOMP_STACKSIZE'}  = 'export OMP_STACKSIZE=256M';
  $job_list{$task}{'ZOMP_PRBIND'}     = 'export OMP_PROC_BIND=spread';
  $job_list{$task}{'ZOMP_PLACES'}     = 'export OMP_PLACES=cores';
  $job_list{$task}{'ZOMP_MXACL'}      = 'export OMP_MAX_ACTIVE_LEVELS=1';
}

for $task ( 'fpl2h_fg','fpl2h_an' ) {
  $job_list{$task}{'TASKS_PER_NODES'} = $submit_type.' --ntasks=16';
  $job_list{$task}{'WALLTIME'}        = $submit_type.' --time=00:50:00';
  $job_list{$task}{'ZNPROC'}          = 'export NPROC=16' ;
  $job_list{$task}{'ZNPROCX'}         = 'export NPROCX=1' ;
  $job_list{$task}{'ZNPROCY'}         = 'export NPROCY=16' ;
}

# Addsurf
$job_list{'Addsurf'}{'ZMPPEXEC'}          = '' ;

# OpenMP
for $task ( 'OI_main','gl_bd','Fldextr','4DVprolog_surfex','Interpol_cams' ) {
 $job_list{$task}{'ZOMP_NUM_THREADS'}  = 'export OMP_NUM_THREADS='.$ompth_1nod;
 $job_list{$task}{'ZKMP_STACKSIZE'}    = 'export KMP_STACKSIZE=128m';
}

# Multi-tasked LBCn, Fldextr
for $task ( 'LBCn_all','LBCmix','Fldextr_all','LSmixBC' ) {
  $job_list{$task}{'NTASKS'}            = $submit_type.' --ntasks=8';
  $job_list{$task}{'CPUS_PER_TASK'}     = $submit_type.' --cpus-per-task=1';
  $job_list{$task}{'MTHINT'}            = $submit_type.' --hint=nomultithread';
  $job_list{$task}{'ZOMP_NUM_THREADS'}  = 'export OMP_NUM_THREADS=1';
}
$job_list{'LBCn_all'}{'MEM_PER_CPU'}    = $submit_type.' --mem-per-cpu=16000';
$job_list{'LBCmix'}{'MEM_PER_CPU'}    = $submit_type.' --mem-per-cpu=16000';
$job_list{'LSmixBC'}{'MEM_PER_CPU'}    = $submit_type.' --mem-per-cpu=16000'; 
$job_list{'Fldextr_all'}{'MEM_PER_CPU'} = $submit_type.' --mem-per-cpu=8000';

$job_list{'PertAna'}{'ZOMP_NUM_THREADS'} = 'export OMP_NUM_THREADS='.$ompth_1nod;
my $bdint = $ENV{PERTDIA_BDINT} || 1;


# Festat, the number of nproc required depends on your sample
$nproc_festat=240;
$job_list{'Festat'}{'ZMPPEXEC'}         = 'export MPPEXEC="srun -n '.$nproc_festat.'"';
$job_list{'Festat'}{'ZNPROC'}           = 'export NPROC='.$nproc_festat ;
#$job_list{'Festat'}{'CPUS_PER_TASK'}    = $submit_type.' --cpus-per-task=2';


# All obsmon tasks
if ( $job =~ /^obsmon_stat_/ ) {
  $job_list{$job}{'MTHINT'}           = $submit_type.' --hint=nomultithread';
  $job_list{$job}{'MEM_PER_CPU'}      = $submit_type.' --mem-per-cpu=4000';
  $job_list{$job}{'ZUSE_TASKSET'}     = 'export USE_TASKSET=no';
  $job_list{$job}{'ZUSE_TMPDIR'}      = 'export USE_TMPDIR=no';
}

# Cheapest obsmon tasks
for $task ( 'obsmon_stat_aircraft', 'obsmon_stat_temp', 'obsmon_stat_pilot' ){
  $job_list{$task}{'NTASKS'}          = $submit_type.' --ntasks=1';
  $job_list{$task}{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task=2';
  $job_list{$task}{'ZmaxPartsAtSameTime'} = 'export maxPartsAtSameTime=2';
}

# Cheaper obsmon tasks
for $task ( 'obsmon_stat_synop_sfc','obsmon_stat_synop','obsmon_stat_sfc' ){
  $job_list{$task}{'NTASKS'}          = $submit_type.' --ntasks=1';
  $job_list{$task}{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task=4';
  $job_list{$task}{'ZmaxPartsAtSameTime'} = 'export maxPartsAtSameTime=4';
}

# Medium obsmon tasks
for $task ( 'obsmon_stat_amv','obsmon_stat_atms','obsmon_stat_scatt',
            'obsmon_stat_mwhs2','obsmon_stat_radar','obsmon_stat_limb' ){
  $job_list{$task}{'NTASKS'}          = $submit_type.' --ntasks=1';
  $job_list{$task}{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task=8';
  $job_list{$task}{'ZmaxPartsAtSameTime'} = 'export maxPartsAtSameTime=8';
  $job_list{$task}{'ZUSE_TASKSET'}    = 'export USE_TASKSET=yes';
}

for $task ('obsmon_stat_amsua','obsmon_stat_amsub'){
  $job_list{$task}{'NTASKS'}          = $submit_type.' --ntasks=1';
  $job_list{$task}{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task=32';
  $job_list{$task}{'ZmaxPartsAtSameTime'} = 'export maxPartsAtSameTime=32';
  $job_list{$task}{'ZUSE_TASKSET'}    = 'export USE_TASKSET=yes';
}

# Heavy obsmon tasks
for $task ( 'obsmon_stat_iasi','obsmon_stat_ecma','obsmon_stat_ccma' ){
  $job_list{$task}{'NTASKS'}          = $submit_type.' --ntasks=128';
  $job_list{$task}{'CPUS_PER_TASK'}   = $submit_type.' --cpus-per-task=1';
  delete $job_list{$task}{'MEM_PER_CPU'};
  $job_list{$task}{'ZmaxPartsAtSameTime'} = 'export maxPartsAtSameTime=64';
  $job_list{$task}{'ZUSE_TASKSET'}    = 'export USE_TASKSET=yes';
  $job_list{$task}{'ZUSE_TMPDIR'}     = 'export USE_TMPDIR=yes';
}

# Don't create core dumps for these tasks
for $task ( 'Testbed_comp' ){
  $job_list{$task}{'ZZULIMC'}         = 'ulimit -c 0';
}

delete $job_list{'Interpol_cams'}{'MEM_PER_CPU'};
$job_list{'Interpol_cams'}{'MEM_PER_CPU'}    = $submit_type.' --mem-per-cpu=12000';
##########################
# End of user definitions
##########################

 return &return_job($job);

}

1;
