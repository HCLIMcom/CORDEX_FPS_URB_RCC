#!/usr/bin/env perl
#
# Select fields for postprocessing  
#
# Ulf Andrae, SMHI, 2013
#
# 1. Define the variables and levels you would like to postprocess in NAMFPC
# 2. Define the selection of variables you would like to output with different frequency
#    At the moment there is only one selection for all timesteps, but we can easily define
#    new streams
# 3. Define the deviation depending on physics, ensemble member number, etc.
#

#
# Definitions
#

# Domain name
$DOMAIN = $ENV{DOMAIN};

# Define empty namelists
%namsats  = ();
%namfpc   = ();
%namppc   = ();
%namfpdy2 = ();
%namfpdyf = ();
%namfpdyh = ();
%namfpdyt = ();
%namfpdys = ();
%namfpdyv = ();
%namfpdyi = ();
%namfpdyp = ();

# Extract the model level list
chomp( $NRFP3S = qx(Vertical_levels.pl $ENV{VLEV} NRFP3S) );
$NRFP3S =~ s/NRFP3S=//g;
@nrfp3s = split(',',$NRFP3S);

# NMAXFPHOLD (number of xxt* generated by Setup_inline_postp)
@xxt_files = glob ( "xxt*" );
$NMAXFPHOLD = scalar @xxt_files;

#
# Main namelist file (fort.4) namelists
#

%namsats = (
  GENERAL => {
  },
);


#
# Basic definitions, for all types of runs
# Some physics dependent fields are added below
#
%namfpc = (

  GENERAL => {
    NMAXFPHOLD => "$NMAXFPHOLD",
    LFPCAPEX =>'.TRUE.',
    LFPMOIS => '.FALSE.',
    NFPCLI => '1',
    NFPCAPE => '6',
    CFPFMT => "'LELAM'",
    CFPDOM  => "'$DOMAIN'",
    L_READ_MODEL_DATE => '.TRUE.',
    LCRITSNOWTEMP => '.FALSE.',
    LISOT_ABOVEG => '.TRUE.',
  },

  CFP2DF => ['SURFPRESSION'    , 'MSLPRESSURE'     , 'SURFTOT.WAT.VAPO'],

  CFP3DF => ['GEOPOTENTIEL'    , 'TEMPERATURE'     ,
             'WIND.U.PHYS'     , 'WIND.V.PHYS'     , 'HUMI.SPECIFI'    ,
             'SOLID_WATER'     , 'LIQUID_WATER'    , 'GRAUPEL'         ],

  CFPPHY => ['INTSURFGEOPOTENT'],

  CFPXFU => ['CLSTEMPERATURE'  , 'CLSHUMI.RELATIVE', 'CLSHUMI.SPECIFIQ', 'CLSVENT.ZONAL'   , 'CLSVENT.MERIDIEN',
             'CLSMAX.WIND.VELO', 'CLSU.RAF.MOD.XFU', 'CLSV.RAF.MOD.XFU', 'CLSMAXI.TEMPERAT', 'CLSMINI.TEMPERAT',
             'CLPMHAUT.MOD.XFU'],

  CFPCFU => ['SURFFLU.LAT.MEVA', 'SURFFLU.LAT.MSUB', 'SURFFLU.LAT.MTOT', 'SURFFLU.MTOTA.NE', 'SURFFLU.MSUBL.NE', 'SURFFLU.CHA.SENS',
             'SOMMFLU.RAY.SOLA', 'SURFFLU.RAY.SOLA', 'SOMMFLU.RAY.THER', 'SURFFLU.RAY.THER',
             'SURFRAYT SOLA DE', 'SURFRAYT THER DE',
             'SURFRAYT SOL CL' , 'SURFRAYT THER CL', 'SOMMRAYT SOL CL' , 'SOMMRAYT THER CL',
             'SURFRAYT DIR SUR', 'TOPRAYT DIR SOM' ,
             'ATMONEBUL.HAUTE' , 'ATMONEBUL.MOYENN', 'ATMONEBUL.BASSE' , 'ATMONEBUL.TOTALE',
             'SURFTENS.TURB.ZO', 'SURFTENS.TURB.ME'],

  # Vertical level definitions
  #                 1          2          3          4          5          6          7          8          9         10
  NRFP3S => [@nrfp3s],
  RFP3P  => [  '20000.',  '25000.',  '30000.',  '40000.',  '50000.',  '60000.',  '70000.',  '85000.',  '92500.', '100000.'],
  RFP3H  => [    '300.',    '150.',    '100.',     '50.'],
  RFP3PV => [],
  RFP3I  => [],

) ;

# Activate GRIB2 output
if ( $ENV{GRIB_BY_FULLPOS} eq "yes" ) {
  $namfpc{GENERAL}{NFPGRIB} = '141';
}

# additional output if wind farm parameterisation is switched on
if ( $ENV{WINDFARM} eq 'yes' ) {
  $namfpc{CFPXFU} = [@{ $namfpc{CFPXFU} },'WFPOWERINS'];
  $namfpc{CFPCFU} = [@{ $namfpc{CFPCFU} },'WFPOWERACC'];
}

#
# Selection namelists - 1-hourly output
# Select fields from the CFP* arrays above, minimum selection for hourly output, can be extended for other output steps below
# TEMPERATURE at model levels and SURFPRESSION are always required by prep_pressure if postprocessing is requested
#

# Single level fields
%namfpphy = (
  CLPHY => ['INTSURFGEOPOTENT'],

  CLXFU => ['CLSTEMPERATURE'  , 'CLSHUMI.RELATIVE', 'CLSHUMI.SPECIFIQ', 'CLSVENT.ZONAL'   , 'CLSVENT.MERIDIEN',
            'CLSMAX.WIND.VELO', 'CLSU.RAF.MOD.XFU', 'CLSV.RAF.MOD.XFU',
            'CLPMHAUT.MOD.XFU', 'CLSMINI.TEMPERAT', 'CLSMAXI.TEMPERAT'],

  CLCFU => ['SURFFLU.LAT.MEVA', 'SURFFLU.LAT.MSUB', 'SURFFLU.LAT.MTOT', 'SURFFLU.MTOTA.NE', 'SURFFLU.MSUBL.NE', 'SURFFLU.CHA.SENS',
            'SOMMFLU.RAY.SOLA', 'SURFFLU.RAY.SOLA', 'SOMMFLU.RAY.THER', 'SURFFLU.RAY.THER',
            'SURFRAYT SOLA DE', 'SURFRAYT THER DE',
            'SURFRAYT SOL CL' , 'SURFRAYT THER CL', 'SOMMRAYT SOL CL' , 'SOMMRAYT THER CL',
            'SURFRAYT DIR SUR', 'TOPRAYT DIR SOM' ,
            'ATMONEBUL.HAUTE' , 'ATMONEBUL.MOYENN', 'ATMONEBUL.BASSE' , 'ATMONEBUL.TOTALE',
            'SURFTENS.TURB.ZO', 'SURFTENS.TURB.ME'],
);
# additional output if wind farm parameterisation is switched on
if ( $ENV{WINDFARM} eq 'yes' ) {
  $namfpphy{CLXFU} = [@{ $namfpphy{CLXFU} },'WFPOWERINS'];
  $namfpphy{CLCFU} = [@{ $namfpphy{CLCFU} },'WFPOWERACC'];
}

%namfpdy2 = (
  CL2DF => ['SURFPRESSION'    , 'MSLPRESSURE'     , 'SURFTOT.WAT.VAPO'],
);

# Model level fields
# The numbers correspond to the ones in NRFP3S
%namfpdys = (
    'LIQUID_WATER'   => [@nrfp3s],
    'SOLID_WATER'    => [@nrfp3s],
);
if ( $ENV{PHYSICS} eq 'arome' ) {
  $namfpdys{'GRAUPEL'} = [@nrfp3s]; 
};

# Pressure level fields
# The numbers correspond to the ones in RFP3P
@namfpdyp_lev = ();
%namfpdyp = ();

# Height level fields
# The numbers correspond to the ones in RFP3H
@namfpdyh_lev = (1,2,3,4) ;
%namfpdyh = (
  TEMPERATURE     => [4],
  'WIND.U.PHYS'   => [@namfpdyh_lev],
  'WIND.V.PHYS'   => [@namfpdyh_lev],
  'HUMI.SPECIFI'  => [4],
);

# PV level fields
# The numbers correspond to the ones in RFP3V
@namfpdyv_lev = ();
%namfpdyv = ();

# Isothermal surface level fields
# The numbers correspond to the ones in RFP3I
%namfpdyi = ();

#
# Special treatment depending on physics
# Here we can define or remove fields
#
if ( $ENV{PHYSICS} eq 'alaro' or $ENV{PHYSICS} eq 'aladin' ) {
  # Add alaro/aladin specific variables
  $namfpc{CFPCFU}  = [@{ $namfpc{CFPCFU} }, 'SURFPREC.EAU.CON','SURFPREC.NEI.CON','SURFPREC.NEI.GEC','SURFPREC.EAU.GEC'];
  $namfpphy{CLCFU} = [@{ $namfpphy{CLCFU} },'SURFPREC.EAU.CON','SURFPREC.NEI.CON','SURFPREC.NEI.GEC','SURFPREC.EAU.GEC'];

  # CAPE/CIN
  $namfpc{CFPXFU}  = [@{ $namfpc{CFPXFU} },'SURFCAPE.MOD.XFU'];
  $namfpphy{CLXFU} = [@{ $namfpphy{CLXFU} },'SURFCAPE.MOD.XFU'];
  
  # Sunshine duration (only output daily)
  $namfpc{CFPPHY}  = [@{ $namfpc{CFPPHY} },'SUNSHI. DURATION'];

  # $namfpc{CFP3DF} = [@{ $namfpc{CFP3DF} },'VITESSE_VERT'];
} elsif ( $ENV{PHYSICS} eq 'arome' ) {
  # Add arome specific variables
  $namfpc{CFPCFU}  = [@{ $namfpc{CFPCFU} }, 'SURFACCPLUIE','SURFACCNEIGE','SURFACCGRAUPEL'];
  $namfpphy{CLCFU} = [@{ $namfpphy{CLCFU} },'SURFACCPLUIE','SURFACCNEIGE','SURFACCGRAUPEL'];

  # CAPE/CIN
  $namfpc{CFP2DF}  = [@{ $namfpc{CFP2DF} },'SURFCAPE.POS.F00','SURFCIEN.POS.F00'];
  $namfpdy2{CL2DF} = [@{ $namfpdy2{CL2DF} },'SURFCAPE.POS.F00','SURFCIEN.POS.F00'];

  # vertical velocity in m/s
  $namfpc{CFP3DF} = [@{ $namfpc{CFP3DF} },'VERT.VELOCIT'];
}

#
# Special treatment if we run offline
#
if ( $ENV{FULLPOS_TYPE} eq 'offline' ) {
  $namfpc{GENERAL}{L_READ_MODEL_DATE} = '.FALSE.';
  if ( $ENV{FULLPOS_LL} == 0 ) {
    delete $namfpc{CFPCFU} ;
    delete $namfpc{CFPXFU} ;
    delete $namfpc{CFP2DF} ;
    delete $namfpphy{CLCFU} ;
    delete $namfpphy{CLXFU} ;
    delete $namfpdy2{CL2DF} ;
    delete $namfpdy2{CL3DF} ;
  }
}

# Write the addition to fort.4
@blev = ('namsats','namfpc');
open OUT, ">> fort.4";
for $namelist ( @blev ) { &write_blev($namelist); }
close OUT;

# Write the selection namelist
@slev = ('namfpphy','namppc','namfpdy2');
@mlev = ('namfpdyi','namfpdyv','namfpdyh','namfpdyp','namfpdys','namfpdyt','namfpdyf');


#
# Generate selection namelist for hourly output, select_p1
# this is the minimum selection and all namelists are defined above.
#
for $files ("select_p1") {
  open OUT, "> $files";

  for $namelist ( @slev ) { &write_slev($namelist); }
  for $namelist ( @mlev ) { &write_mlev($namelist); }

  close OUT;
}


#
# Generate selection namelist for 6H hours output which has fields from
# 1H and 6H output intervals.
#
# Single level fields
$namfpphy{CLCFU} = [@{ $namfpphy{CLCFU} }];

$namfpphy{CLXFU} = [@{ $namfpphy{CLXFU} }];

$namfpdy2{CL2DF} = [@{ $namfpdy2{CL2DF} }];

if ( $ENV{PHYSICS} eq 'alaro' or $ENV{PHYSICS} eq 'aladin' ) {
  # Pressure levels
  @namfpdyp_lev = (1,2,3,4,5,6,7,8,9,10) ;
  %namfpdyp = (
    GEOPOTENTIEL    => [@namfpdyp_lev],
    TEMPERATURE     => [@namfpdyp_lev],
    'WIND.U.PHYS'   => [@namfpdyp_lev],
    'WIND.V.PHYS'   => [@namfpdyp_lev],
    'HUMI.SPECIFI'  => [@namfpdyp_lev],
   #'VITESSE_VERT'  => [@namfpdyp_lev],
  );
} elsif ( $ENV{PHYSICS} eq 'arome' ) {
  # Pressure levels
  @namfpdyp_lev = (1,2,3,4,5,6,7,8,9,10) ;
  %namfpdyp = (
    GEOPOTENTIEL    => [@namfpdyp_lev],
    TEMPERATURE     => [@namfpdyp_lev],
    'WIND.U.PHYS'   => [@namfpdyp_lev],
    'WIND.V.PHYS'   => [@namfpdyp_lev],
    'VERT.VELOCIT'  => [@namfpdyp_lev],
    'HUMI.SPECIFI'  => [@namfpdyp_lev],
  );

}

for $files ("select_p6") {
  open OUT, "> $files";

  for $namelist ( @slev ) { &write_slev($namelist); }
  for $namelist ( @mlev ) { &write_mlev($namelist); }

  close OUT;
}


# Generate selection namelist for 24H hours output which has fields from
# 1H, 6H and 24H output intervals.
# Use same setup for timestep +0.
if ( $ENV{PHYSICS} eq 'alaro' or $ENV{PHYSICS} eq 'aladin' ) {
  # Add alaro/aladin specific variables
  $namfpphy{CLPHY} = [@{ $namfpphy{CLPHY} },'SUNSHI. DURATION'];
}

for $files ("select_p24","select_p0") {
  open OUT, "> $files";

  for $namelist ( @slev ) { &write_slev($namelist); }
  for $namelist ( @mlev ) { &write_mlev($namelist); }

  close OUT;
}


#
# Generate selection namelist for sub-hourly timesteps (select_pm)
#

# Empty namelists
%namsats  = ();
%namfpc   = ();
%namfpphy = ();
%namppc   = ();
%namfpdy2 = ();
%namfpdyf = ();
%namfpdyh = ();
%namfpdyt = ();
%namfpdys = ();
%namfpdyv = ();
%namfpdyi = ();
%namfpdyp = ();


for $files ("select_pm") {
  # First the selection of the parameters
  if ( $ENV{PHYSICS} eq 'alaro' or $ENV{PHYSICS} eq 'aladin' ) {
    $namfpphy{CLCFU} = [@{ $namfpphy{CLCFU} },'SURFPREC.EAU.GEC', 'SURFPREC.EAU.CON', 'SURFPREC.NEI.GEC', 'SURFPREC.NEI.CON' ];
  } elsif ( $ENV{PHYSICS} eq 'arome' ) {
    $namfpphy{CLCFU} = [@{ $namfpphy{CLCFU} },'SURFACCPLUIE','SURFACCNEIGE','SURFACCGRAUPEL'];
  }

# Second the creation of the namelist.
  open OUT, "> $files" ;

  for $namelist ( @slev ) { &write_slev($namelist); }
  for $namelist ( @mlev ) { &write_mlev($namelist); }

  close OUT;
}



############################################################
############################################################
############################################################
sub write_blev {


$nam = shift ;

$NAM= uc $nam;
print OUT "\&$NAM\n";

$i = 0;
for $key ( sort keys %${nam} ) {
   if ( $key eq 'GENERAL' ) {
     for $role ( sort keys %{ ${$nam}{$key} } ) {
         print OUT " $role=${$nam}{$key}{$role},\n";
     }
   } else {
     for $role (  @{ ${$nam}{$key} } ) {
         $i++ ;
         if ( $key =~/C/ ) { $role="\'$role\'"; } ;
         print OUT " $key($i)=$role,\n";
     }
     $i = 0;
   } ;
} ;
print OUT "\/\n";


}
############################################################
############################################################
############################################################
sub write_slev {

$nam = shift ;

$NAM= uc $nam;
print OUT "\&$NAM\n";
$i = 0;
for $key ( sort keys %${nam} ) {
     for $role (  @{ ${$nam}{$key} } ) {
         $i++ ;
         print OUT " $key($i)=\'$role\',\n";
         $dkey = $key ;
         $dkey =~ s/CL/CLD/g;
         print OUT " $dkey($i)=\'$DOMAIN\',\n";
     }
     $i = 0;
} ;
print OUT "\/\n";


}
############################################################
############################################################
############################################################
sub write_mlev {

$nam = shift ;

$NAM= uc $nam ;
print OUT "\&$NAM\n";
     $i = 0;
for $key ( sort keys %${nam} ) {
         $i++ ;
         print OUT " CL3DF($i)=\'$key\',\n";
         $nlist = scalar(@{${$nam}{$key}}) ;
         $list = sprintf "@{${$nam}{$key}}";
         $list =~ s/ /,/g ;
         print OUT " IL3DF(1:$nlist,$i)=$list,\n";
         $j = 0;
         foreach (@{${$nam}{$key}}) {
           $j++ ;
           print OUT " CLD3DF($j,$i)=\'$DOMAIN\',\n";
         }
} ;
print OUT "\/\n";


}
############################################################
############################################################
############################################################
